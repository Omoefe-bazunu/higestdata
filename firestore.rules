rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isAdmin() {
      return isAuthenticated() && getUserData().role == 'admin';
    }
    
    function isAgent() {
      return isAuthenticated() && getUserData().role == 'agent';
    }
    
    function isAdminOrAgent() {
      return isAdmin() || isAgent();
    }
    
    function isKYCApproved() {
      return isAuthenticated() && getUserData().kycStatus == 'approved';
    }

    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdminOrAgent();
      allow create: if isAuthenticated() && isOwner(userId) && 
        request.resource.data.keys().hasAll(['email', 'role', 'createdAt']) &&
        request.resource.data.role in ['user', 'agent'] &&
        request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Wallets collection
    match /wallets/{walletId} {
      allow read: if isOwner(resource.data.userId) || isAdminOrAgent();
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update: if isAdmin() || 
        (isOwner(resource.data.userId) && 
         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['balance']));
      allow delete: if isAdmin();
    }

    // Transactions collection
    match /transactions/{transactionId} {
      allow read: if isOwner(resource.data.userId) || isAdminOrAgent();
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId) && 
        isKYCApproved() &&
        request.resource.data.keys().hasAll(['userId', 'type', 'amount', 'status']);
      allow update: if isAdminOrAgent() || 
        (isOwner(resource.data.userId) && 
         resource.data.status == 'pending' &&
         request.resource.data.status == 'cancelled');
      allow delete: if isAdmin();
    }

    // Gift Cards collection
    match /giftCards/{cardId} {
      allow read: if isOwner(resource.data.userId) || isAdminOrAgent();
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId) && 
        isKYCApproved();
      allow update: if isAdminOrAgent();
      allow delete: if isAdmin();
    }

    // Crypto Trades collection
    match /cryptoTrades/{tradeId} {
      allow read: if isOwner(resource.data.userId) || isAdminOrAgent();
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId) && 
        isKYCApproved();
      allow update: if isAdminOrAgent();
      allow delete: if isAdmin();
    }

    // Airtime Orders collection
    match /airtimeOrders/{orderId} {
      allow read: if isOwner(resource.data.userId) || isAdminOrAgent();
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
      allow update: if isAdminOrAgent();
      allow delete: if isAdmin();
    }

    // Bill Payments collection
    match /billPayments/{paymentId} {
      allow read: if isOwner(resource.data.userId) || isAdminOrAgent();
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId);
      allow update: if isAdminOrAgent();
      allow delete: if isAdmin();
    }

    // KYC Documents collection
    match /kycDocuments/{kycId} {
      allow read: if isOwner(resource.data.userId) || isAdminOrAgent();
      allow create: if isAuthenticated() && 
        isOwner(request.resource.data.userId) &&
        request.resource.data.status == 'pending';
      allow update: if isAdminOrAgent() || 
        (isOwner(resource.data.userId) && resource.data.status == 'pending');
      allow delete: if isAdmin();
    }

    // Referrals collection
    match /referrals/{referralId} {
      allow read: if isOwner(resource.data.referrerId) || 
        isOwner(resource.data.refereeId) || 
        isAdminOrAgent();
      allow create: if isAuthenticated() && 
        (isOwner(request.resource.data.referrerId) || 
         isOwner(request.resource.data.refereeId));
      allow update: if isAdminOrAgent();
      allow delete: if isAdmin();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.userId) || isAdminOrAgent();
      allow create: if isAdminOrAgent() || 
        (isAuthenticated() && isOwner(request.resource.data.userId));
      allow update: if isOwner(resource.data.userId) || isAdminOrAgent();
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }

    // Rates collection (public read, admin write)
    match /rates/{rateId} {
      allow read: if true; // Public rates for display
      allow write: if isAdmin();
    }

    // System Settings collection (admin only)
    match /systemSettings/{settingId} {
      allow read: if isAdminOrAgent();
      allow write: if isAdmin();
    }

    // Admin analytics and reports
    match /analytics/{document=**} {
      allow read, write: if isAdmin();
    }

    // Support tickets
    match /supportTickets/{ticketId} {
      allow read: if isOwner(resource.data.userId) || isAdminOrAgent();
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update: if isAdminOrAgent() || 
        (isOwner(resource.data.userId) && 
         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'assignedTo']));
      allow delete: if isAdmin();
    }
  }
}